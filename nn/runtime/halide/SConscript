from building import *
Import('asenv')

cwd = GetCurrentDir()

objs = []

HALIDE_ROOT=os.getenv('HALIDE_ROOT', '.')
ENABLED_HL = True if(os.path.exists('%s/include/Halide.h'%(HALIDE_ROOT))) else False

if(ENABLED_HL):
    asenv.Append(CPPPATH=['%s/include'%(HALIDE_ROOT)])
    asenv.Append(CPPDEFINES=['ENABLE_RUNTIME_HALIDE'])
    asenv.Append(LIBPATH=['%s/lib'%(HALIDE_ROOT)])
    asenv.Append(LIBS=['Halide'])
    objs += Glob('*.cpp')

    hl_objs = Glob('GenOps/*.cpp')
    cmd = 'gcc -I{0}/include -L{0}/lib '.format(HALIDE_ROOT)
    cmd += ' '.join([str(o) for o in hl_objs])
    cmd += ' -lHalide -lpthread -lstdc++ -ldl -lm'
    cmd += ' -o hlGenOps'
    MKObject(hl_objs+Glob('GenOps/*.h'), 'hlGenOps', cmd)
    hlGens = os.path.abspath('./hlGenOps')
    prefix, suffix = ('','dll') if IsPlatformWindows() else ('lib','so')
    if(os.path.isfile(hlGens)):
        hlGens += ' -e o,h -o %s/ops target=x86-64-linux-avx-avx2-f16c-fma-sse41 -g'%(cwd)
        for hl in hl_objs:
            p = os.path.basename(str(hl))
            if(p.endswith('_generator.cpp')):
                tgt = os.path.abspath('ops/%sHL_%s.%s'%(prefix, p[:-14], suffix))
                cmd = '%s HL_%s'%(hlGens, p[:-14])
                MKObject([hl], tgt, cmd, e=False)
    objsM = Glob('ops/*.o')
    for obj in objsM:
        asenv.SharedLibrary(obj)
Return('objs')